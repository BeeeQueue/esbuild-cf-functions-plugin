// Vitest Snapshot v1

exports[`allows exponent operator 1`] = `
"
var foo = 2 ** 2;
console.log(foo);
"
`;

exports[`allows template strings 1`] = `
"
var foo = \`Hello\`;
var bar = \`\${foo}\`;
"
`;

exports[`arrays > does not modify supported functions 1`] = `
"
var foo = Array.of(1, 2, 3);
var foo = [].copyWithin(10, 0, 2);
var foo = [].fill(\\"foo\\", 0, 20);
var foo = [].find(() => true);
var foo = [].findIndex(() => true);
var foo = [].includes(\\"1\\");
"
`;

exports[`arrays > does not modify supported typed arrays 1`] = `
"
var foo = new Int8Array([1, 2, 3]);
var foo = new Uint8Array([1, 2, 3]);
var foo = new Uint8ClampedArray([1, 2, 3]);
var foo = new Int16Array([1, 2, 3]);
var foo = new Uint16Array([1, 2, 3]);
var foo = new Int32Array([1, 2, 3]);
var foo = new Uint32Array([1, 2, 3]);
var foo = new Float32Array([1, 2, 3]);
var foo = new Float64Array([1, 2, 3]);
var foo = new Float64Array([1, 2, 3]);
var foo = new Float64Array([1, 2, 3]).copyWithin(10, 0, 2);
var foo = new Float64Array([1, 2, 3]).fill(1, 20);
var foo = new Float64Array([1, 2, 3]).join(\\"\\\\n\\");
new Float64Array([1, 2, 3]).set([1, 2, 3]);
var foo = new Float64Array([1, 2, 3]).slice(0, 1);
var foo = new Float64Array([1, 2, 3]).subarray(0, 1);
var foo = new Float64Array([1, 2, 3]).toString();
"
`;

exports[`const, let, var > lets vars through 1`] = `
"
var foo = \\"bar\\";
console.log(foo);
"
`;

exports[`does not modify crypto imports 1`] = `
"
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = function(to, from, except, desc) {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\")
    for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {
      key = keys[i];
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: function(k) {
          return from[k];
        }.bind(null, key), enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
  return to;
};
var __toESM = function(mod, isNodeMode, target) {
  return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\"default\\", { value: mod, enumerable: true }) : target, mod);
};

var import_crypto = __toESM(require(\\"crypto\\"));
var hash = import_crypto.default.createHash(\\"sha1\\");
hash.update(\\"data\\");
hash.digest(\\"base64\\");
"
`;

exports[`does not modify named capture groups 1`] = `
"
var regex = /(?<foo>.*+)/;
var matches = regex.exec(\\"Hello world\\");
"
`;

exports[`does not modify supported functions 1`] = `
"
var foo = String.fromCodePoint(12);
var foo = \\"bar\\".codePointAt(0);
var foo = \\"bar\\".includes(\\"ar\\");
var foo = \\"bar\\".startsWith(\\"ba\\");
var foo = \\"bar\\".endsWith(\\"ar\\");
var foo = \\"bar\\".repeat(2);
var foo = \\"bar\\".padStart(10);
var foo = \\"bar\\".padEnd(10);
var foo = \\"bar\\".trimStart();
var foo = \\"bar\\".trimEnd();
"
`;

exports[`does not modify supported functions 2`] = `
"
var foo = Number.isFinite(10);
var foo = Number.isInteger(10);
var foo = Number.isNaN(10);
var foo = Number.isSafeInteger(10);
var foo = Number.parseFloat(\\"10.0\\");
var foo = Number.parseInt(\\"10\\");
var foo = Number.EPSILON;
var foo = Number.MAX_SAFE_INTEGER;
var foo = Number.MAX_VALUE;
var foo = Number.MIN_SAFE_INTEGER;
var foo = Number.MIN_VALUE;
var foo = Number.NEGATIVE_INFINITY;
var foo = Number.NaN;
var foo = Number.POSITIVE_INFINITY;
var foo = 10 .toExponential();
var foo = 10 .toFixed();
var foo = 10 .toPrecision(10);
"
`;

exports[`does not modify supported functions 3`] = `
"
new Promise((resolve, reject) => resolve());
new Promise((resolve, reject) => reject());
new Promise((resolve, reject) => reject()).catch(console.log);
new Promise((resolve, reject) => reject()).then(console.log);
new Promise((resolve, reject) => reject()).finally(console.log);
"
`;

exports[`functions > allows arrow functions 1`] = `
"
var foo = () => {
  return true;
};
console.log(foo());
"
`;

exports[`functions > allows spread parameters 1`] = `
"
var foo = (...rest) => {
  return rest[0];
};
console.log(foo(\\"test\\"));
"
`;

// Vitest Snapshot v1

exports[`allows exponent operator 1`] = `
"
var foo = 2 ** 2;
"
`;

exports[`allows template strings 1`] = `
"
var foo = \`Hello\`;
var bar = \`\${foo}\`;
"
`;

exports[`arrays > does not modify supported functions 1`] = `
"
var foo = Array.of(1, 2, 3);
var foo = [].copyWithin(10, 0, 2);
var foo = [].fill(\\"foo\\", 0, 20);
var foo = [].find(() => true);
var foo = [].findIndex(() => true);
"
`;

exports[`const, let, var > lets vars through 1`] = `
"
var foo = \\"bar\\";
"
`;

exports[`functions > allows arrow functions 1`] = `
"
var foo = () => {
  var bar = true;
};
"
`;

exports[`functions > allows spread parameters 1`] = `
"
var foo = (...rest) => {
  var bar = rest[0];
};
"
`;

exports[`number > does not modify supported functions 1`] = `
"
var foo = Number.isFinite(10);
var foo = Number.isInteger(10);
var foo = Number.isNaN(10);
var foo = Number.isSafeInteger(10);
var foo = Number.parseFloat(\\"10.0\\");
var foo = Number.parseInt(\\"10\\");
var foo = Number.EPSILON;
var foo = Number.MAX_SAFE_INTEGER;
var foo = Number.MAX_VALUE;
var foo = Number.MIN_SAFE_INTEGER;
var foo = Number.MIN_VALUE;
var foo = Number.NEGATIVE_INFINITY;
var foo = Number.NaN;
var foo = Number.POSITIVE_INFINITY;
var foo = 10 .toExponential();
var foo = 10 .toFixed();
var foo = 10 .toPrecision(10);
"
`;

exports[`regex > does not modify named capture groups 1`] = `
"
var regex = /(?<foo>.*+)/;
var matches = regex.exec(\\"Hello world\\");
"
`;

exports[`strings > does not modify supported functions 1`] = `
"
var foo = String.fromCodePoint(12);
var foo = \\"bar\\".codePointAt(0);
var foo = \\"bar\\".includes(\\"ar\\");
var foo = \\"bar\\".startsWith(\\"ba\\");
var foo = \\"bar\\".endsWith(\\"ar\\");
var foo = \\"bar\\".repeat(2);
var foo = \\"bar\\".padStart(10);
var foo = \\"bar\\".padEnd(10);
var foo = \\"bar\\".trimStart();
var foo = \\"bar\\".trimEnd();
"
`;
